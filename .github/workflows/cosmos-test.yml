name: Cosmos DB Emulator Test Suite

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

env:
  DOTNET_NOLOGO: true
  DOTNET_CLI_TELEMETRY_OPTOUT: true

jobs:
  cosmos-test:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup .NET 9
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '9.0.x'
        
    - name: Verify system requirements
      run: |
        echo "üîç Verifying system requirements..."
        echo "Docker version:"
        docker --version
        docker info
        echo ""
        echo "Available disk space:"
        df -h
        echo ""
        echo "Checking minimum disk space requirement (8GB free)..."
        available_space=$(df / | tail -1 | awk '{print $4}')
        if [ "$available_space" -lt 8388608 ]; then
          echo "‚ö†Ô∏è Warning: Less than 8GB available. Cosmos emulator may fail."
        else
          echo "‚úÖ Sufficient disk space available"
        fi
        echo ""
        echo "Memory information:"
        free -h
        
    - name: Pull Cosmos DB Emulator image
      run: |
        echo "üì• Pulling Cosmos DB Linux emulator vnext-preview image..."
        docker pull mcr.microsoft.com/cosmosdb/linux/azure-cosmos-emulator:vnext-preview
        echo "‚úÖ Image pulled successfully"
        
    - name: Initial cleanup
      run: |
        echo "üßπ Performing initial cleanup..."
        # Kill any existing CosmosEmulatorApp processes specifically
        pkill -f "CosmosEmulatorApp" 2>/dev/null || true
        pkill -f "dotnet.*AppHost" 2>/dev/null || true
        # Stop and remove cosmos containers specifically
        docker ps -a --filter "ancestor=mcr.microsoft.com/cosmosdb/linux/azure-cosmos-emulator:vnext-preview" -q | xargs -r docker stop 2>/dev/null || true
        docker ps -a --filter "ancestor=mcr.microsoft.com/cosmosdb/linux/azure-cosmos-emulator:vnext-preview" -q | xargs -r docker rm 2>/dev/null || true
        # Clean up any dangling volumes
        docker volume prune -f 2>/dev/null || true
        echo "‚úÖ Initial cleanup completed"
        
    - name: Restore .NET dependencies
      run: |
        echo "üì¶ Restoring .NET dependencies..."
        dotnet restore --verbosity minimal
        echo "‚úÖ Dependencies restored successfully"
        
    - name: Build solution
      run: |
        echo "üî® Building solution..."
        if dotnet build CosmosEmulatorApp.sln --verbosity minimal --no-restore; then
          echo "‚úÖ Build successful"
        else
          echo "‚ùå Build failed"
          exit 1
        fi
        
    - name: Make test scripts executable
      run: |
        echo "üìù Making test scripts executable..."
        chmod +x comprehensive-test.sh
        chmod +x *.sh 2>/dev/null || true
        echo "Available scripts:"
        ls -la *.sh
        
    - name: Run comprehensive test suite
      run: |
        echo "üß™ Starting comprehensive Cosmos DB test suite..."
        echo "Current working directory: $(pwd)"
        echo "Available scripts:"
        ls -la *.sh
        echo ""
        echo "üöÄ Starting test execution..."
        
        # Run the comprehensive test script
        if ./comprehensive-test.sh; then
          echo ""
          echo "üéâ Test suite completed successfully!"
        else
          echo ""
          echo "‚ùå Test suite failed!"
          exit 1
        fi
      timeout-minutes: 20
      
    - name: Collect diagnostic information on failure
      if: failure()
      run: |
        echo "üîç Collecting diagnostic information..."
        echo ""
        echo "=== System Information ==="
        echo "Date: $(date)"
        echo "Uptime: $(uptime)"
        echo "Free memory: $(free -h)"
        echo "Disk usage: $(df -h)"
        echo ""
        echo "=== Running Processes ==="
        ps aux | grep -E "(dotnet|cosmos)" | head -20 || true
        echo ""
        echo "=== Docker Containers ==="
        docker ps -a
        echo ""
        echo "=== Docker Images ==="
        docker images | grep cosmos || true
        echo ""
        echo "=== Network Ports ==="
        netstat -tlnp 2>/dev/null | grep -E "(5000|5001|8081|10251|10252|10253|10254)" || true
        echo ""
        echo "=== Cosmos DB Container Logs (last 50 lines) ==="
        cosmos_container=$(docker ps -aq --filter "ancestor=mcr.microsoft.com/cosmosdb/linux/azure-cosmos-emulator:vnext-preview" | head -1)
        if [ -n "$cosmos_container" ]; then
          echo "Container ID: $cosmos_container"
          docker logs --tail 50 "$cosmos_container" 2>&1 || echo "Failed to get container logs"
        else
          echo "No Cosmos DB container found"
        fi
        echo ""
        echo "=== Application Logs ==="
        if [ -f "test-output.log" ]; then
          echo "Test output log:"
          tail -50 test-output.log
        fi
        if [ -f "data-insertion-test.log" ]; then
          echo "Data insertion log:"
          tail -20 data-insertion-test.log
        fi
        
    - name: Emergency cleanup on failure
      if: failure()
      run: |
        echo "üö® Performing emergency cleanup after failure..."
        # Kill specific application processes
        pkill -f "CosmosEmulatorApp" 2>/dev/null || true
        pkill -f "dotnet.*AppHost" 2>/dev/null || true
        
        # Stop and remove cosmos containers
        echo "Stopping Cosmos DB containers..."
        cosmos_containers=$(docker ps -q --filter "ancestor=mcr.microsoft.com/cosmosdb/linux/azure-cosmos-emulator:vnext-preview")
        if [ -n "$cosmos_containers" ]; then
          echo "Found cosmos containers: $cosmos_containers"
          echo "$cosmos_containers" | xargs -r docker stop
          echo "$cosmos_containers" | xargs -r docker rm
        else
          echo "No cosmos containers found to clean up"
        fi
        
        # General cleanup
        docker container prune -f 2>/dev/null || true
        echo "‚úÖ Emergency cleanup completed"
        
    - name: Final cleanup
      if: always()
      run: |
        echo "üßπ Performing final cleanup..."
        
        # Kill application processes
        pkill -f "CosmosEmulatorApp" 2>/dev/null || true
        pkill -f "dotnet.*AppHost" 2>/dev/null || true
        
        # Stop all cosmos containers
        cosmos_containers=$(docker ps -aq --filter "ancestor=mcr.microsoft.com/cosmosdb/linux/azure-cosmos-emulator:vnext-preview")
        if [ -n "$cosmos_containers" ]; then
          echo "Cleaning up cosmos containers..."
          echo "$cosmos_containers" | xargs -r docker stop 2>/dev/null || true
          echo "$cosmos_containers" | xargs -r docker rm 2>/dev/null || true
        fi
        
        # System cleanup
        docker system prune -f 2>/dev/null || true
        
        echo "‚úÖ Final cleanup completed"
        
    - name: Test results summary
      if: always()
      run: |
        echo ""
        echo "üìä Test Results Summary"
        echo "======================"
        echo "Workflow: ${{ github.workflow }}"
        echo "Run ID: ${{ github.run_id }}"
        echo "Commit: ${{ github.sha }}"
        echo "Branch: ${{ github.ref_name }}"
        echo "Actor: ${{ github.actor }}"
        echo "Event: ${{ github.event_name }}"
        echo ""
        if [ "${{ job.status }}" == "success" ]; then
          echo "üéâ Status: SUCCESS"
          echo "‚úÖ All tests passed successfully!"
          echo "‚úÖ Cosmos DB emulator integration verified"
          echo "‚úÖ API endpoints tested"
          echo "‚úÖ CRUD operations confirmed"
        else
          echo "‚ùå Status: FAILED"
          echo "Check the logs above for detailed error information"
        fi
