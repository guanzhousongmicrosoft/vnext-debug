name: Repro Cosmos vNext + Aspire issue #199

on:
  workflow_dispatch:
    inputs:
      emulatorDigest:
        description: 'Optional emulator image digest to pin (e.g. sha256:...)'
        required: false
        default: ''
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  repro:
    runs-on: ubuntu-latest

    env:
      # Allow Aspire to use http for local emulator
      ASPIRE_ALLOW_UNSECURED_TRANSPORT: "true"
      DOTNET_CLI_TELEMETRY_OPTOUT: "1"

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup .NET 9 SDK
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '9.0.x'

      - name: Pre-pull/retag Cosmos vNext emulator image (pin if digest provided)
        run: |
          set -e
          docker --version
          IMAGE_REPO="mcr.microsoft.com/cosmosdb/linux/azure-cosmos-emulator"
          if [ -n "${{ inputs.emulatorDigest }}" ]; then
            echo "Pulling pinned emulator digest: ${{ inputs.emulatorDigest }}"
            docker pull "${IMAGE_REPO}@${{ inputs.emulatorDigest }}"
            echo "Tagging pinned digest locally as vnext-preview so Aspire uses it..."
            docker tag "${IMAGE_REPO}@${{ inputs.emulatorDigest }}" "${IMAGE_REPO}:vnext-preview"
          else
            echo "Pulling rolling vnext-preview (may be fixed and not repro)..."
            docker pull "${IMAGE_REPO}:vnext-preview" || true
          fi
          echo "Local emulator images:"
          docker image ls "${IMAGE_REPO}" --no-trunc || true

      - name: Restore and build
        run: |
          dotnet --info
          dotnet restore AspireCosmosSimple/AspireCosmosSimple.sln
          dotnet build AspireCosmosSimple/AspireCosmosSimple.sln --no-restore -c Debug

      - name: Patch Aspire host for CI (no Console.ReadKey)
        run: |
          cp AspireCosmosSimple/AspireCosmosSimple/Program.cs AspireCosmosSimple/AspireCosmosSimple/Program.cs.bak
          # If the app host had a ReadKey (now removed), this would neutralize it in CI
          sed -i "s/Console.ReadKey();/await Task.Delay(TimeSpan.FromMinutes(3));/" AspireCosmosSimple/AspireCosmosSimple/Program.cs || true
          echo "--- Patched Program.cs (tail) ---"
          tail -n 30 AspireCosmosSimple/AspireCosmosSimple/Program.cs

      - name: Run repro harness (DistributedApplicationTestingBuilder)
        id: run_repro
        run: |
          set +e
          mkdir -p logs
          echo "Running CosmosEmulatorReproTest..."
          dotnet run --project AspireCosmosSimple/CosmosEmulatorReproTest/CosmosEmulatorReproTest.csproj > logs/aspire_output.log 2>&1
          EXIT_CODE=$?
          echo "repro-exit-code=$EXIT_CODE" >> $GITHUB_OUTPUT
          echo "Repro harness exit code: $EXIT_CODE"
          # Continue to collect logs
          exit 0

      - name: Ensure port 7777 reaches emulator (forward to mapped 8081 if needed)
        run: |
          sudo apt-get update && sudo apt-get install -y socat net-tools >/dev/null
          if netstat -tuln | grep -q ":7777"; then
            echo "Port 7777 already listening."
            exit 0
          fi

          echo "Port 7777 not listening. Attempting to detect emulator container host port for 8081..."
          EMU_ID=$(docker ps --filter "ancestor=mcr.microsoft.com/cosmosdb/linux/azure-cosmos-emulator:vnext-preview" -q | head -n1)
          if [ -z "$EMU_ID" ]; then
            EMU_ID=$(docker ps --format '{{.ID}} {{.Image}}' | awk '/azure-cosmos-emulator/ {print $1; exit}')
          fi

          if [ -n "$EMU_ID" ]; then
            echo "Found emulator container: $EMU_ID"
            HOST_PORT=$(docker inspect --format='{{ (index (index .NetworkSettings.Ports "8081/tcp") 0).HostPort }}' "$EMU_ID" 2>/dev/null || true)
            if [ -n "$HOST_PORT" ]; then
              echo "Emulator 8081/tcp is mapped to host port: $HOST_PORT"
              echo "Starting socat TCP forwarder 7777 -> 127.0.0.1:$HOST_PORT"
              nohup socat TCP-LISTEN:7777,fork,reuseaddr TCP:127.0.0.1:$HOST_PORT >/dev/null 2>&1 &
              sleep 1
              if netstat -tuln | grep -q ":7777"; then
                echo "Forwarder established on 7777."
              else
                echo "Failed to establish forwarder on 7777."
              fi
              exit 0
            else
              echo "Could not determine host port mapping for 8081/tcp from docker inspect."
            fi
          else
            echo "No emulator container found yet."
          fi

          echo "Fallback: if host port 8081 is open, forward 7777 -> 8081"
          if netstat -tuln | grep -q ":8081"; then
            echo "Starting socat TCP forwarder 7777 -> 127.0.0.1:8081"
            nohup socat TCP-LISTEN:7777,fork,reuseaddr TCP:127.0.0.1:8081 >/dev/null 2>&1 &
          else
            echo "Port 8081 not open on host; skipping fallback forwarder."
          fi

      - name: Run client to create DB/container and capture failure
        id: run_client
        run: |
          set +e
          echo "Running CosmosDBTest client..."
          dotnet run --project AspireCosmosSimple/CosmosDBTest/CosmosDBTest.csproj > logs/test_output.log 2>&1
          EXIT_CODE=$?
          echo "client-exit-code=$EXIT_CODE" >> $GITHUB_OUTPUT
          echo "Client exit code: $EXIT_CODE"
          # Always continue to collect logs even if it failed
          exit 0

      - name: Detect repro signal in client output
        id: detect_repro
        run: |
          if grep -q "REPRO_SIGNAL: COSMOS_API_SCHEMA_MISSING" logs/test_output.log; then
            echo "repro=1" >> $GITHUB_OUTPUT
            echo "Detected repro signal in test output"
          else
            echo "repro=0" >> $GITHUB_OUTPUT
            echo "Repro signal not detected"
          fi

      - name: Collect diagnostics
        if: always()
        run: |
          echo "=== Aspire tail ===" && tail -n 200 logs/aspire_output.log || true
          echo "=== Repro harness output (aspire_output.log) ===" && tail -n 400 logs/aspire_output.log || true
          echo "=== Docker ps ===" && docker ps -a || true
          EMU_ID=$(docker ps --format '{{.ID}} {{.Image}}' | awk '/azure-cosmos-emulator/ {print $1; exit}')
          if [ -n "$EMU_ID" ]; then
            echo "=== Emulator logs ($EMU_ID) ==="
            docker logs "$EMU_ID" > logs/cosmos_emulator.log 2>&1 || true
            docker inspect "$EMU_ID" > logs/cosmos_emulator_inspect.json 2>&1 || true
          else
            echo "No emulator container found via docker ps"
          fi
          # Save ports
          (command -v ss >/dev/null && ss -tulpen || netstat -tulpen) > logs/ports.txt 2>&1 || true

      - name: Stop Aspire host
        if: always()
        run: |
          mv AspireCosmosSimple/AspireCosmosSimple/Program.cs.bak AspireCosmosSimple/AspireCosmosSimple/Program.cs

      - name: Upload logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: repro-199-logs
          path: |
            logs/**

      - name: Detect repro signal in harness output
        id: detect_repro_harness
        run: |
          if grep -qi "schema \"cosmos_api\" does not exist" logs/aspire_output.log; then
            echo "repro=1" >> $GITHUB_OUTPUT
            echo "Detected schema error in harness output"
          else
            echo "repro=0" >> $GITHUB_OUTPUT
            echo "No schema error detected in harness output"
          fi

      - name: Fail job if repro detected or harness failed
        if: steps.detect_repro.outputs.repro == '1' || steps.detect_repro_harness.outputs.repro == '1' || (steps.run_repro.outputs.repro-exit-code && steps.run_repro.outputs.repro-exit-code != '0')
        run: |
          if [ "${{ steps.detect_repro.outputs.repro }}" = "1" ] || [ "${{ steps.detect_repro_harness.outputs.repro }}" = "1" ]; then
            echo "Detected issue #199 schema error in harness logs. Failing as expected for triage." >&2
            exit 1
          else
            echo "Harness failed with exit code: ${{ steps.run_repro.outputs.repro-exit-code }} (non-repro failure)." >&2
            exit 1
          fi
