name: Aspire Cosmos DB Workflow

on:
  workflow_dispatch:  # Allows manual triggering

jobs:
  build-and-run:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    # Create scripts directory for health check script
    - name: Create scripts directory
      run: mkdir -p scripts
    
    # Setup .NET SDK
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '9.0.x' # Use the appropriate version

    # Install required dependencies for Cosmos DB Emulator on Linux
    - name: Install Dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y libunwind8 libcurl4 openssl net-tools

    # Setup Docker (in case it's not properly set up)
    - name: Setup Docker
      run: |
        # Make sure Docker is running
        sudo systemctl start docker
        sudo systemctl enable docker
        
        # Add current user to docker group
        sudo usermod -aG docker $USER
        
        # Check Docker status
        docker --version
        docker ps
        
        # Pre-pull the Cosmos DB emulator image
        echo "Pre-pulling Cosmos DB emulator image..."
        docker pull mcr.microsoft.com/cosmosdb/linux/azure-cosmos-emulator:vnext-preview || echo "Failed to pull emulator image"

    # Restore dependencies for both projects
    - name: Restore dependencies
      run: |
        dotnet restore AspireCosmosSimple/AspireCosmosSimple/AspireCosmosSimple.csproj
        dotnet restore AspireCosmosSimple/CosmosDBTest/CosmosDBTest.csproj
    
    # Build both projects
    - name: Build
      run: |
        dotnet build AspireCosmosSimple/AspireCosmosSimple/AspireCosmosSimple.csproj --no-restore
        dotnet build AspireCosmosSimple/CosmosDBTest/CosmosDBTest.csproj --no-restore
    
    # Verify configuration
    - name: Verify Configuration
      run: |
        chmod +x scripts/verify-config.sh
        ./scripts/verify-config.sh
    
    # Modify Program.cs to run in CI environment
    - name: Prepare Aspire for CI environment
      run: |
        # Create a backup of the original file
        cp AspireCosmosSimple/AspireCosmosSimple/Program.cs AspireCosmosSimple/AspireCosmosSimple/Program.cs.bak
        
        # Replace Console.ReadKey with a sleep timer for CI environment
        sed -i 's/Console.ReadKey();/Thread.Sleep(120000); \/\/ Sleep for 2 minutes instead of waiting for key press in CI environment/' AspireCosmosSimple/AspireCosmosSimple/Program.cs
        
        # Add using statement for Thread if not already present
        sed -i '1s/^/using System.Threading;\n/' AspireCosmosSimple/AspireCosmosSimple/Program.cs
        
        # Show the changes
        echo "Modified Program.cs for CI environment:"
        cat AspireCosmosSimple/AspireCosmosSimple/Program.cs
    
    # Run Aspire application in background
    - name: Start Aspire with Cosmos DB Emulator
      run: |
        # Set environment variable to increase verbosity
        export ASPNETCORE_ENVIRONMENT=Development
        export ASPIRE_LOGGING_LEVEL=Debug
        
        # Make the health check script executable
        chmod +x scripts/wait-for-cosmos.sh
        
        # Start the application in the background
        dotnet run --project AspireCosmosSimple/AspireCosmosSimple/AspireCosmosSimple.csproj > aspire_output.log 2>&1 &
        ASPIRE_PID=$!
        
        # Verify the process is running
        if ! ps -p $ASPIRE_PID > /dev/null; then
          echo "Failed to start Aspire application"
          cat aspire_output.log
          exit 1
        fi
        
        echo "Aspire application started with PID: $ASPIRE_PID"
        echo "Waiting for Cosmos DB emulator to initialize..."
        
        # Wait for initial startup
        sleep 30
        
        # Show initial Docker status
        echo "Docker container status:"
        docker ps -a
        
        # Run health check script
        ./scripts/wait-for-cosmos.sh
        HEALTH_CHECK_RESULT=$?
        
        if [ $HEALTH_CHECK_RESULT -ne 0 ]; then
          echo "Cosmos DB emulator health check failed"
          echo "Aspire logs:"
          cat aspire_output.log
          
          # Kill the Aspire application
          if ps -p $ASPIRE_PID > /dev/null; then
            kill $ASPIRE_PID
          fi
          
          # Restore the original Program.cs
          mv AspireCosmosSimple/AspireCosmosSimple/Program.cs.bak AspireCosmosSimple/AspireCosmosSimple/Program.cs
          
          exit 1
        fi
        
        echo "Cosmos DB emulator is ready!"
        
        # Debug environment before running test
        echo "=== Environment Debug Information ==="
        echo "System information:"
        uname -a
        echo "Docker containers:"
        docker ps -a
        echo "Listening ports:"
        netstat -tuln | grep -E "(7777|8081)" || echo "Ports 7777 and 8081 are not in use"
        echo "Docker networks:"
        docker network ls
        echo "Environment variables:"
        env | grep -E "(ASPIRE|COSMOS|AZURE)" || echo "No Aspire/Cosmos environment variables set"
        
        # Create logs directory
        mkdir -p logs
        
        # Save logs before running test
        echo "Saving logs before test..."
        cp aspire_output.log logs/aspire_output_before_test.log
        COSMOS_CONTAINER_ID=$(docker ps -q | head -1)
        if [ -n "$COSMOS_CONTAINER_ID" ]; then
          docker logs $COSMOS_CONTAINER_ID > logs/cosmos_container_before_test.log 2>&1 || echo "Failed to get container logs"
        fi
        
        # Run the test application
        echo "Running test application to verify Cosmos DB emulator..."
        echo "Testing connection to http://localhost:7777 first..."
        curl -s --max-time 5 http://localhost:7777/ > /dev/null && echo "Port 7777 is accessible" || echo "Port 7777 is not accessible"
        
        dotnet run --project AspireCosmosSimple/CosmosDBTest/CosmosDBTest.csproj > logs/test_output.log 2>&1 || true
        TEST_RESULT=$?
        
        # Save more detailed logs after test
        echo "Saving detailed logs after test..."
        cp aspire_output.log logs/aspire_output.log
        if [ -n "$COSMOS_CONTAINER_ID" ]; then
          docker logs $COSMOS_CONTAINER_ID > logs/cosmos_container.log 2>&1 || echo "Failed to get container logs"
          docker inspect $COSMOS_CONTAINER_ID > logs/cosmos_container_inspect.json 2>&1 || echo "Failed to inspect container"
        fi
        
        # Kill the Aspire application
        if ps -p $ASPIRE_PID > /dev/null; then
          echo "Stopping Aspire application..."
          kill $ASPIRE_PID
          # Wait a bit for cleanup
          sleep 5
        fi
        
        # Restore the original Program.cs
        mv AspireCosmosSimple/AspireCosmosSimple/Program.cs.bak AspireCosmosSimple/AspireCosmosSimple/Program.cs
        
        # Show test result
        echo "Test output:"
        cat logs/test_output.log
        
        # Exit with test result
        exit $TEST_RESULT
    
    # Upload logs as artifacts
    - name: Upload logs
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: debug-logs
        path: logs/
