name: Reproduce Cosmos DB Emulator Issue

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      debug_mode:
        description: 'Enable debug mode'
        required: false
        default: 'true'
        type: boolean

env:
  DOTNET_VERSION: '9.0.x'
  POSTGRES_VERSION: '16'
  # Using the public Azure Cosmos DB emulator image from Microsoft Container Registry
  COSMOS_DB_IMAGE: 'cosmosdbemulator.azurecr.io/public/cosmosdb/linux/azure-cosmos-emulator:vnext-preview'
  
jobs:
  reproduce-issue:
    runs-on: ubuntu-latest
    
    services:
      postgres-cosmos:
        image: cosmosdbemulator.azurecr.io/public/cosmosdb/linux/azure-cosmos-emulator:vnext-preview
        env:
          POSTGRES_PASSWORD: mypassword
          POSTGRES_USER: postgres
          POSTGRES_DB: postgres
          PGUSER: postgres
          PGPASSWORD: mypassword
          ENABLE_DEBUG: true
          ENABLE_TELEMETRY: false
          # Additional environment variables based on the repository configuration
          CITUS_ROLE: SingleNode
          POD_IP: localhost
          CosmosDB_CLUSTER_NAME: default
        ports:
          - 5432:9712  # Map host 5432 to container 9712 (default pgcosmos port)
          - 8081:8081  # Gateway port
          - 1234:1234  # Additional service port
        options: >-
          --health-cmd "pg_isready -h localhost -p 9712 -U postgres"
          --health-interval 15s
          --health-timeout 10s
          --health-retries 15
          --name cosmos-postgres
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
        
    - name: Enable debug logging
      run: |
        echo "DOTNET_LOGGING__LOGLEVEL__DEFAULT=Debug" >> $GITHUB_ENV
        echo "ASPNETCORE_LOGGING__LOGLEVEL__DEFAULT=Debug" >> $GITHUB_ENV
        echo "Logging__LogLevel__Default=Debug" >> $GITHUB_ENV
        
    - name: Wait for PostgreSQL to be ready
      run: |
        echo "🔍 Waiting for PostgreSQL to be fully ready..."
        # Use port 5432 which is mapped from container port 9712
        timeout 180s bash -c 'until pg_isready -h localhost -p 5432 -U postgres; do sleep 3; done'
        echo "✅ PostgreSQL is ready"
        
        # Additional wait for pgcosmos extension to be fully loaded
        echo "🔍 Waiting for pgcosmos extension to be ready..."
        sleep 30
        
    - name: Debug - Check PostgreSQL connection
      run: |
        echo "🔍 Testing PostgreSQL connection..."
        PGPASSWORD=mypassword psql -h localhost -p 5432 -U postgres -d postgres -c "SELECT version();"
        
        echo "🔍 Checking server status and processes..."
        PGPASSWORD=mypassword psql -h localhost -p 5432 -U postgres -d postgres -c "SELECT pg_backend_pid(), current_database(), current_user, inet_server_addr(), inet_server_port();"
        
    - name: Debug - Check available schemas
      run: |
        echo "🔍 Checking available schemas..."
        PGPASSWORD=mypassword psql -h localhost -p 5432 -U postgres -d postgres -c "SELECT schema_name FROM information_schema.schemata ORDER BY schema_name;"
        
    - name: Debug - Check installed extensions
      run: |
        echo "🔍 Checking installed extensions..."
        PGPASSWORD=mypassword psql -h localhost -p 5432 -U postgres -d postgres -c "SELECT extname, extversion FROM pg_extension;"
        
    - name: Debug - Check for cosmos_api schema specifically
      run: |
        echo "🔍 Checking for cosmos_api schema..."
        PGPASSWORD=mypassword psql -h localhost -p 5432 -U postgres -d postgres -c "SELECT EXISTS(SELECT 1 FROM information_schema.schemata WHERE schema_name = 'cosmos_api') AS cosmos_api_exists;"
        
        echo "🔍 Checking for other cosmos schemas..."
        PGPASSWORD=mypassword psql -h localhost -p 5432 -U postgres -d postgres -c "SELECT schema_name FROM information_schema.schemata WHERE schema_name LIKE 'cosmos%' ORDER BY schema_name;"
        
    - name: Debug - Check cosmos_api functions if schema exists
      continue-on-error: true
      run: |
        echo "🔍 Checking cosmos_api functions..."
        PGPASSWORD=mypassword psql -h localhost -p 5432 -U postgres -d postgres -c "SELECT routine_name FROM information_schema.routines WHERE routine_schema = 'cosmos_api' ORDER BY routine_name;"
        
        echo "🔍 Checking if cosmos_api.list_databases function exists..."
        PGPASSWORD=mypassword psql -h localhost -p 5432 -U postgres -d postgres -c "SELECT EXISTS(SELECT 1 FROM information_schema.routines WHERE routine_schema = 'cosmos_api' AND routine_name = 'list_databases') AS list_databases_exists;"
        
    - name: Debug - Try to create cosmos_api schema manually
      continue-on-error: true
      run: |
        echo "🔍 Attempting to create cosmos_api schema manually..."
        PGPASSWORD=mypassword psql -h localhost -p 5432 -U postgres -d postgres -c "CREATE SCHEMA IF NOT EXISTS cosmos_api;"
        
        echo "🔍 Attempting to create pgcosmos extension if not exists..."
        PGPASSWORD=mypassword psql -h localhost -p 5432 -U postgres -d postgres -c "CREATE EXTENSION IF NOT EXISTS pgcosmos CASCADE;"
        
        echo "🔍 Checking if extension creation worked..."
        PGPASSWORD=mypassword psql -h localhost -p 5432 -U postgres -d postgres -c "SELECT EXISTS(SELECT 1 FROM information_schema.schemata WHERE schema_name = 'cosmos_api') AS cosmos_api_exists_after_manual_creation;"
        
    - name: Debug - Check PostgreSQL logs
      run: |
        echo "🔍 Checking PostgreSQL container logs..."
        docker logs cosmos-postgres 2>&1 | tail -50
        
    - name: Debug - Check PostgreSQL configuration
      run: |
        echo "🔍 Checking PostgreSQL configuration..."
        PGPASSWORD=mypassword psql -h localhost -p 5432 -U postgres -d postgres -c "SHOW shared_preload_libraries;"
        PGPASSWORD=mypassword psql -h localhost -p 5432 -U postgres -d postgres -c "SHOW log_min_messages;"
        
        echo "🔍 Checking PostgreSQL settings relevant to pgcosmos..."
        PGPASSWORD=mypassword psql -h localhost -p 5432 -U postgres -d postgres -c "SHOW port;" || echo "Port setting not available"
        PGPASSWORD=mypassword psql -h localhost -p 5432 -U postgres -d postgres -c "SHOW listen_addresses;" || echo "Listen addresses not available"
        
        echo "🔍 Checking database encoding and collation..."
        PGPASSWORD=mypassword psql -h localhost -p 5432 -U postgres -d postgres -c "SELECT datname, encoding, datcollate, datctype FROM pg_database WHERE datname='postgres';"
        
    - name: Create minimal .NET Aspire test project
      run: |
        echo "🚀 Creating minimal .NET Aspire test project..."
        mkdir -p test-project
        cd test-project
        
        # Create Aspire AppHost project
        dotnet new aspire-apphost -n TestAspire.AppHost
        cd TestAspire.AppHost
        
        # Add Aspire Cosmos DB package
        dotnet add package Aspire.Hosting.Azure.CosmosDB --prerelease || dotnet add package Aspire.Hosting.Azure.CosmosDB
        
    - name: Create test Aspire configuration
      run: |
        cd test-project/TestAspire.AppHost
        
        cat > Program.cs << 'EOF'
        using Aspire.Hosting;
        using Aspire.Hosting.Azure;
        
        var builder = DistributedApplication.CreateBuilder(args);
        
        Console.WriteLine("🔍 Starting Cosmos DB emulator setup...");
        
        var cosmos = builder
            .AddAzureCosmosDB("database")
            .RunAsPreviewEmulator(options =>
            {
                options.WithLifetime(ContainerLifetime.Persistent);
                options.WithAnnotation(new ContainerImageAnnotation 
                { 
                    Image = "mcr.microsoft.com/cosmosdb/postgres",
                    Tag = "latest"
                });
            });
        
        Console.WriteLine("🔍 Adding database and container...");
        var database = cosmos.AddCosmosDatabase("MyDb");
        var container = database.AddContainer("Users", "/emailAddress");
        
        Console.WriteLine("🔍 Building application...");
        var app = builder.Build();
        
        Console.WriteLine("🚀 Starting application...");
        app.Run();
        EOF
        
    - name: Create test console app
      run: |
        cd test-project
        
        # Create console app to test Cosmos connection
        dotnet new console -n TestConsoleApp
        cd TestConsoleApp
        
        # Add required packages
        dotnet add package Microsoft.Azure.Cosmos --prerelease || dotnet add package Microsoft.Azure.Cosmos
        dotnet add package Npgsql
        
        cat > Program.cs << 'EOF'
        using Microsoft.Azure.Cosmos;
        using Npgsql;
        using System;
        using System.Threading.Tasks;
        
        Console.WriteLine("🔍 Testing Cosmos DB connection...");
        
        // Test direct PostgreSQL connection first
        Console.WriteLine("🔍 Testing direct PostgreSQL connection...");
        try
        {
            var connectionString = "Host=localhost;Port=5432;Database=postgres;Username=postgres;Password=mypassword";
            using var conn = new NpgsqlConnection(connectionString);
            await conn.OpenAsync();
            
            // Check if cosmos_api schema exists
            using var cmd = new NpgsqlCommand("SELECT EXISTS(SELECT 1 FROM information_schema.schemata WHERE schema_name = 'cosmos_api')", conn);
            var exists = (bool)await cmd.ExecuteScalarAsync();
            Console.WriteLine($"✅ cosmos_api schema exists: {exists}");
            
            if (!exists)
            {
                Console.WriteLine("❌ cosmos_api schema does not exist!");
                
                // Try to list available schemas
                using var schemaCmd = new NpgsqlCommand("SELECT schema_name FROM information_schema.schemata ORDER BY schema_name", conn);
                using var reader = await schemaCmd.ExecuteReaderAsync();
                Console.WriteLine("📋 Available schemas:");
                while (await reader.ReadAsync())
                {
                    Console.WriteLine($"  - {reader.GetString(0)}");
                }
            }
            else
            {
                // Try to call a cosmos_api function
                try
                {
                    using var cosmosCmd = new NpgsqlCommand("SELECT * FROM cosmos_api.list_databases('{}');", conn);
                    var result = await cosmosCmd.ExecuteScalarAsync();
                    Console.WriteLine($"✅ cosmos_api.list_databases() works: {result}");
                }
                catch (Exception ex)
                {
                    Console.WriteLine($"❌ cosmos_api.list_databases() failed: {ex.Message}");
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"❌ PostgreSQL connection failed: {ex.Message}");
        }
        
        // Test Cosmos SDK connection
        Console.WriteLine("🔍 Testing Cosmos SDK connection...");
        try
        {
            // Use the correct gateway port for Cosmos SDK connection
            var cosmosClient = new CosmosClient("http://localhost:8081", "C2y6yDjf5/R+ob0N8A7Cgv30VRDJIWEHLM+4QDU5DE2nQ9nDuVTqobD4b8mGGyPMbIZnqyMsEcaGQy67XIw/Jw==");
            var database = await cosmosClient.CreateDatabaseIfNotExistsAsync("MyDb");
            Console.WriteLine("✅ Cosmos SDK connection successful");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"❌ Cosmos SDK connection failed: {ex.Message}");
            Console.WriteLine($"Full exception: {ex}");
        }
        
        Console.WriteLine("🏁 Test completed");
        EOF
        
    - name: Run PostgreSQL connection test
      run: |
        cd test-project/TestConsoleApp
        echo "🧪 Running PostgreSQL connection test..."
        dotnet run
        
    - name: Build Aspire project
      run: |
        cd test-project/TestAspire.AppHost
        echo "🔨 Building Aspire project..."
        dotnet build --verbosity detailed
        
    - name: Debug - Final PostgreSQL state check
      run: |
        echo "🔍 Final state check..."
        echo "Container status:"
        docker ps -a
        echo ""
        echo "Container logs (last 100 lines):"
        docker logs cosmos-postgres 2>&1 | tail -100
        echo ""
        echo "PostgreSQL process check:"
        PGPASSWORD=mypassword psql -h localhost -p 5432 -U postgres -d postgres -c "SELECT pg_backend_pid(), current_database(), current_user;"
        
    - name: Attempt to reproduce the exact error
      continue-on-error: true
      run: |
        echo "🎯 Attempting to reproduce the exact error from issue #199..."
        
        # Try the exact operation that fails
        PGPASSWORD=mypassword psql -h localhost -p 5432 -U postgres -d postgres -c "
        DO \$\$
        BEGIN
            -- Attempt to call the function that causes the error
            IF EXISTS(SELECT 1 FROM information_schema.schemata WHERE schema_name = 'cosmos_api') THEN
                RAISE NOTICE 'cosmos_api schema exists, testing functions...';
                PERFORM cosmos_api.list_databases('{}');
                RAISE NOTICE 'cosmos_api.list_databases() works!';
            ELSE
                RAISE EXCEPTION 'schema \"cosmos_api\" does not exist';
            END IF;
        EXCEPTION
            WHEN others THEN
                RAISE NOTICE 'Error occurred: %', SQLERRM;
                RAISE;
        END;
        \$\$;
        "
        
    - name: Collect diagnostic information
      if: always()
      run: |
        echo "📊 Collecting diagnostic information..."
        echo "=== Environment ==="
        printenv | grep -E "(POSTGRES|COSMOS|DOTNET|ASPNET)" | sort
        echo ""
        echo "=== Docker info ==="
        docker version
        docker info
        echo ""
        echo "=== System info ==="
        uname -a
        echo ""
        echo "=== Network info ==="
        netstat -tulpn | grep -E ":(5432|8081|9712|1234)" || echo "Cosmos DB ports not found"
        echo ""
        echo "=== Container network inspection ==="
        docker inspect cosmos-postgres --format='{{.NetworkSettings.Ports}}' || echo "Container network info not available"
        echo ""
        echo "=== Final container status ==="
        docker ps -a
        
    - name: Upload logs as artifact
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: debug-logs
        path: |
          /tmp/postgres-logs.txt
        retention-days: 5
        
    - name: Create logs file
      if: always()
      run: |
        echo "Creating comprehensive log file..."
        {
          echo "=== GitHub Actions Debug Log ==="
          echo "Date: $(date)"
          echo "Runner: ubuntu-latest"
          echo "Issue: https://github.com/Azure/azure-cosmos-db-emulator-docker/issues/199"
          echo ""
          echo "=== Container Logs ==="
          docker logs cosmos-postgres 2>&1
          echo ""
          echo "=== Environment Variables ==="
          printenv | sort
        } > /tmp/postgres-logs.txt
