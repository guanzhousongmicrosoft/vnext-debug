name: Reproduce Azure Cosmos DB Emulator vNext Issue

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      debug_level:
        description: 'Debug level (1-3, higher = more verbose)'
        required: false
        default: '2'
        type: choice
        options:
          - '1'
          - '2'
          - '3'
      test_scenario:
        description: 'Test scenario to run'
        required: false
        default: 'basic'
        type: choice
        options:
          - 'basic'
          - 'persistent'
          - 'ephemeral'
          - 'all'

env:
  DOTNET_VERSION: '9.0.x'
  COSMOS_EMULATOR_VERSION: 'latest'
  DEBUG_LEVEL: ${{ github.event.inputs.debug_level || '2' }}
  TEST_SCENARIO: ${{ github.event.inputs.test_scenario || 'basic' }}

jobs:
  test-windows:
    name: Test on Windows (Control Group)
    runs-on: windows-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
        
    - name: Install Docker Desktop
      run: |
        choco install docker-desktop -y
        Start-Sleep -Seconds 30
        
    - name: Enable Windows containers
      run: |
        & "C:\Program Files\Docker\Docker\DockerCli.exe" -SwitchLinuxEngine
        Start-Sleep -Seconds 10
        
    - name: Run Windows test
      shell: powershell
      run: |
        ./scripts/test-cosmos-windows.ps1 -DebugLevel ${{ env.DEBUG_LEVEL }} -TestScenario ${{ env.TEST_SCENARIO }}
        
    - name: Upload Windows logs
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: windows-logs
        path: logs/
        retention-days: 7

  test-ubuntu:
    name: Test on Ubuntu (Issue Reproduction)
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
        
    - name: Setup Docker
      run: |
        sudo apt-get update
        sudo apt-get install -y docker.io docker-compose
        sudo systemctl start docker
        sudo systemctl enable docker
        sudo usermod -aG docker $USER
        
    - name: Docker system info
      run: |
        docker --version
        docker info
        docker system df
        
    - name: Run Ubuntu test
      run: |
        chmod +x ./scripts/test-cosmos-ubuntu.sh
        ./scripts/test-cosmos-ubuntu.sh ${{ env.DEBUG_LEVEL }} ${{ env.TEST_SCENARIO }}
        
    - name: Upload Ubuntu logs
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: ubuntu-logs
        path: logs/
        retention-days: 7

  test-macos:
    name: Test on macOS (Additional Platform)
    runs-on: macos-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
        
    - name: Setup Docker
      run: |
        brew install docker docker-compose
        brew install --cask docker
        open /Applications/Docker.app
        sleep 30
        
    - name: Run macOS test
      run: |
        chmod +x ./scripts/test-cosmos-macos.sh
        ./scripts/test-cosmos-macos.sh ${{ env.DEBUG_LEVEL }} ${{ env.TEST_SCENARIO }}
        
    - name: Upload macOS logs
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: macos-logs
        path: logs/
        retention-days: 7

  analyze-results:
    name: Analyze Test Results
    needs: [test-windows, test-ubuntu, test-macos]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: collected-logs/
        
    - name: Analyze logs
      run: |
        chmod +x ./scripts/analyze-logs.sh
        ./scripts/analyze-logs.sh
        
    - name: Upload analysis results
      uses: actions/upload-artifact@v4
      with:
        name: analysis-results
        path: analysis/
        retention-days: 30
        
    - name: Create issue summary
      run: |
        chmod +x ./scripts/create-summary.sh
        ./scripts/create-summary.sh > $GITHUB_STEP_SUMMARY
