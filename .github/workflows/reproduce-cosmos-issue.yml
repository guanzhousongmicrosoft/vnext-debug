name: Reproduce Cosmos DB Emulator Issue

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      debug_mode:
        description: 'Enable debug mode'
        required: false
        default: 'true'
        type: boolean

env:
  DOTNET_VERSION: '9.0.x'
  POSTGRES_VERSION: '16'
  # Using the official Windows Azure Cosmos DB emulator image from Microsoft Container Registry
  COSMOS_DB_IMAGE: 'mcr.microsoft.com/cosmosdb/windows/azure-cosmos-emulator'
  
jobs:
  reproduce-issue:
    runs-on: windows-latest  # Changed to Windows for Windows container compatibility
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
        
    - name: Enable debug logging
      shell: pwsh
      run: |
        echo "DOTNET_LOGGING__LOGLEVEL__DEFAULT=Debug" >> $env:GITHUB_ENV
        echo "ASPNETCORE_LOGGING__LOGLEVEL__DEFAULT=Debug" >> $env:GITHUB_ENV
        echo "Logging__LogLevel__Default=Debug" >> $env:GITHUB_ENV
        
    - name: Start Cosmos DB Emulator Container
      shell: pwsh
      run: |
        Write-Host "🔍 Starting Cosmos DB emulator container..."
        
        # Pull the image first
        docker pull mcr.microsoft.com/cosmosdb/windows/azure-cosmos-emulator:latest
        
        # Start the container with proper Windows configuration
        docker run -d --name cosmos-emulator `
          -p 8081:8081 `
          -p 10251:10251 `
          -p 10252:10252 `
          -p 10253:10253 `
          -p 10254:10254 `
          -e AZURE_COSMOS_EMULATOR_PARTITION_COUNT=10 `
          -e AZURE_COSMOS_EMULATOR_ENABLE_DATA_PERSISTENCE=false `
          -e AZURE_COSMOS_EMULATOR_IP_ADDRESS_OVERRIDE=127.0.0.1 `
          mcr.microsoft.com/cosmosdb/windows/azure-cosmos-emulator:latest
        
        Write-Host "✅ Container started"
        
    - name: Wait for Cosmos DB Emulator to be ready
      shell: pwsh
      run: |
        Write-Host "🔍 Waiting for Cosmos DB emulator to be ready..."
        
        $maxAttempts = 60
        $attempt = 0
        $isReady = $false
        
        do {
            $attempt++
            Write-Host "Attempt $attempt/$maxAttempts - Checking if emulator is ready..."
            
            try {
                $response = Invoke-WebRequest -Uri "https://localhost:8081/_explorer/emulator.pem" -SkipCertificateCheck -TimeoutSec 10 -ErrorAction Stop
                if ($response.StatusCode -eq 200) {
                    $isReady = $true
                    Write-Host "✅ Cosmos DB emulator is ready!"
                }
            }
            catch {
                Write-Host "⏳ Emulator not ready yet... waiting 10 seconds"
                Start-Sleep -Seconds 10
            }
        }
        while (-not $isReady -and $attempt -lt $maxAttempts)
        
        if (-not $isReady) {
            Write-Host "❌ Emulator failed to start within timeout"
            # Show container logs for debugging
            docker logs cosmos-emulator
            exit 1
        }
        
    - name: Debug - Check Cosmos DB Emulator status
      shell: pwsh
      run: |
        Write-Host "🔍 Checking Cosmos DB emulator status..."
        
        # Check container status
        docker ps -a
        
        # Check if emulator endpoint is responding
        try {
            $response = Invoke-WebRequest -Uri "https://localhost:8081/" -SkipCertificateCheck -TimeoutSec 10
            Write-Host "✅ Emulator endpoint is responding: $($response.StatusCode)"
        }
        catch {
            Write-Host "❌ Emulator endpoint not responding: $($_.Exception.Message)"
        }
        
        # Check container logs
        Write-Host "🔍 Container logs (last 50 lines):"
        docker logs cosmos-emulator --tail 50
        
    - name: Create minimal .NET Aspire test project
      shell: pwsh
      run: |
        Write-Host "🚀 Creating minimal .NET Aspire test project..."
        New-Item -Path "test-project" -ItemType Directory -Force
        Set-Location test-project
        
        # Create Aspire AppHost project
        dotnet new aspire-apphost -n TestAspire.AppHost
        Set-Location TestAspire.AppHost
        
        # Add Aspire Cosmos DB package
        dotnet add package Aspire.Hosting.Azure.CosmosDB --prerelease
        if ($LASTEXITCODE -ne 0) {
            dotnet add package Aspire.Hosting.Azure.CosmosDB
        }
        
    - name: Create test Aspire configuration
      shell: pwsh
      run: |
        Set-Location test-project/TestAspire.AppHost
        
        $programContent = @"
        using Aspire.Hosting;
        using Aspire.Hosting.Azure;
        
        var builder = DistributedApplication.CreateBuilder(args);
        
        Console.WriteLine("🔍 Starting Cosmos DB emulator setup...");
        
        var cosmos = builder
            .AddAzureCosmosDB("database")
            .RunAsEmulator(options =>
            {
                options.WithLifetime(ContainerLifetime.Persistent);
            });
        
        Console.WriteLine("🔍 Adding database and container...");
        var database = cosmos.AddCosmosDatabase("MyDb");
        var container = database.AddContainer("Users", "/emailAddress");
        
        Console.WriteLine("🔍 Building application...");
        var app = builder.Build();
        
        Console.WriteLine("🚀 Starting application...");
        app.Run();
"@
        
        $programContent | Out-File -FilePath "Program.cs" -Encoding UTF8
        
    - name: Create test console app
      shell: pwsh
      run: |
        Set-Location test-project
        
        # Create console app to test Cosmos connection
        dotnet new console -n TestConsoleApp
        Set-Location TestConsoleApp
        
        # Add required packages
        dotnet add package Microsoft.Azure.Cosmos --prerelease
        if ($LASTEXITCODE -ne 0) {
            dotnet add package Microsoft.Azure.Cosmos
        }
        
        $consoleAppContent = @"
        using Microsoft.Azure.Cosmos;
        using System;
        using System.Threading.Tasks;
        
        Console.WriteLine("🔍 Testing Cosmos DB connection...");
        
        // Test Cosmos SDK connection using the standard emulator settings
        Console.WriteLine("🔍 Testing Cosmos SDK connection...");
        try
        {
            // Use the standard Cosmos DB emulator connection string and key
            var cosmosClient = new CosmosClient(
                "https://localhost:8081", 
                "C2y6yDjf5/R+ob0N8A7Cgv30VRDJIWEHLM+4QDU5DE2nQ9nDuVTqobD4b8mGGyPMbIZnqyMsEcaGQy67XIw/Jw==",
                new CosmosClientOptions
                {
                    HttpClientFactory = () => {
                        var handler = new HttpClientHandler()
                        {
                            ServerCertificateCustomValidationCallback = HttpClientHandler.DangerousAcceptAnyServerCertificateValidator
                        };
                        return new HttpClient(handler);
                    }
                });
                
            Console.WriteLine("🔍 Creating database...");
            var databaseResponse = await cosmosClient.CreateDatabaseIfNotExistsAsync("MyDb");
            Console.WriteLine(`$"✅ Database creation status: {databaseResponse.StatusCode}");
            
            Console.WriteLine("🔍 Creating container...");
            var containerResponse = await databaseResponse.Database.CreateContainerIfNotExistsAsync("Users", "/emailAddress");
            Console.WriteLine(`$"✅ Container creation status: {containerResponse.StatusCode}");
            
            Console.WriteLine("✅ Cosmos SDK connection and operations successful!");
        }
        catch (Exception ex)
        {
            Console.WriteLine(`$"❌ Cosmos SDK connection failed: {ex.Message}");
            Console.WriteLine(`$"Full exception: {ex}");
            
            // This should reproduce the issue from GitHub issue #199
            if (ex.Message.Contains("cosmos_api") || ex.Message.Contains("schema") || ex.Message.Contains("does not exist"))
            {
                Console.WriteLine("🎯 REPRODUCED: This appears to be the same issue as GitHub issue #199!");
            }
        }
        
        Console.WriteLine("🏁 Test completed");
"@
        
        $consoleAppContent | Out-File -FilePath "Program.cs" -Encoding UTF8
        
    - name: Run Cosmos DB connection test
      shell: pwsh
      run: |
        Set-Location test-project/TestConsoleApp
        Write-Host "🧪 Running Cosmos DB connection test..."
        dotnet run
        
    - name: Build Aspire project
      shell: pwsh
      run: |
        Set-Location test-project/TestAspire.AppHost
        Write-Host "🔨 Building Aspire project..."
        dotnet build --verbosity detailed
        
    - name: Test Aspire application startup
      shell: pwsh
      continue-on-error: true
      run: |
        Set-Location test-project/TestAspire.AppHost
        Write-Host "🚀 Testing Aspire application startup..."
        
        # Start the Aspire application with timeout
        $job = Start-Job -ScriptBlock {
            Set-Location $using:PWD
            dotnet run --no-build
        }
        
        # Wait for 60 seconds and then stop
        Wait-Job $job -Timeout 60
        
        if ($job.State -eq "Running") {
            Write-Host "⏰ Aspire application still running after 60 seconds, stopping..."
            Stop-Job $job
        }
        
        # Get any output/errors
        $output = Receive-Job $job
        Write-Host "📋 Aspire application output:"
        Write-Host $output
        
        Remove-Job $job
        
    - name: Debug - Final emulator state check
      shell: pwsh
      run: |
        Write-Host "🔍 Final state check..."
        Write-Host "Container status:"
        docker ps -a
        Write-Host ""
        Write-Host "Container logs (last 100 lines):"
        docker logs cosmos-emulator --tail 100
        Write-Host ""
        Write-Host "Emulator endpoint test:"
        try {
            $response = Invoke-WebRequest -Uri "https://localhost:8081/" -SkipCertificateCheck -TimeoutSec 5
            Write-Host "Emulator responding: $($response.StatusCode)"
        }
        catch {
            Write-Host "Emulator not responding: $($_.Exception.Message)"
        }
        
    - name: Attempt to reproduce the exact error from issue #199
      shell: pwsh
      continue-on-error: true
      run: |
        Write-Host "🎯 Attempting to reproduce the exact error from issue #199..."
        
        # Try to simulate the .NET Aspire scenario that fails
        try {
            Write-Host "Testing database creation that should trigger the cosmos_api schema error..."
            
            # This simulates what .NET Aspire does internally
            $cosmosClient = New-Object Microsoft.Azure.Cosmos.CosmosClient -ArgumentList @(
                "https://localhost:8081",
                "C2y6yDjf5/R+ob0N8A7Cgv30VRDJIWEHLM+4QDU5DE2nQ9nDuVTqobD4b8mGGyPMbIZnqyMsEcaGQy67XIw/Jw=="
            )
            
            # This operation should trigger the schema error if it exists
            $database = $cosmosClient.CreateDatabaseIfNotExistsAsync("MyDb").GetAwaiter().GetResult()
            Write-Host "✅ Database operation succeeded - issue may not be reproduced in this environment"
        }
        catch {
            Write-Host "❌ Database operation failed: $($_.Exception.Message)"
            
            # Check if this is the specific error from the GitHub issue
            if ($_.Exception.Message -like "*cosmos_api*" -or $_.Exception.Message -like "*schema*does not exist*") {
                Write-Host "🎯 SUCCESS: Reproduced the exact error from GitHub issue #199!"
                Write-Host "Error details: $($_.Exception.ToString())"
            } else {
                Write-Host "This appears to be a different error than issue #199"
            }
        }
        
    - name: Collect diagnostic information
      if: always()
      shell: pwsh
      run: |
        Write-Host "📊 Collecting diagnostic information..."
        Write-Host "=== Environment ==="
        Get-ChildItem Env: | Where-Object { $_.Name -match "(COSMOS|DOTNET|ASPNET)" } | Sort-Object Name
        Write-Host ""
        Write-Host "=== Docker info ==="
        docker version
        docker info
        Write-Host ""
        Write-Host "=== System info ==="
        Get-ComputerInfo | Select-Object WindowsProductName, WindowsVersion, TotalPhysicalMemory
        Write-Host ""
        Write-Host "=== Network info ==="
        Get-NetTCPConnection | Where-Object { $_.LocalPort -in @(8081, 10251, 10252, 10253, 10254) } | Format-Table
        Write-Host ""
        Write-Host "=== Container network inspection ==="
        try { docker inspect cosmos-emulator --format='{{.NetworkSettings.Ports}}' } catch { Write-Host "Container network info not available" }
        Write-Host ""
        Write-Host "=== Final container status ==="
        docker ps -a
        
    - name: Create logs file
      if: always()
      shell: pwsh
      run: |
        Write-Host "Creating comprehensive log file..."
        
        $logContent = @"
=== GitHub Actions Debug Log ===
Date: $(Get-Date)
Runner: windows-latest  
Issue: https://github.com/Azure/azure-cosmos-db-emulator-docker/issues/199

=== Container Logs ===
$(docker logs cosmos-emulator 2>&1)

=== Environment Variables ===
$(Get-ChildItem Env: | Sort-Object Name | Out-String)

=== System Information ===
$(Get-ComputerInfo | Out-String)

=== Network Information ===
$(Get-NetTCPConnection | Where-Object { $_.LocalPort -in @(8081, 10251, 10252, 10253, 10254) } | Format-Table | Out-String)
"@
        
        $logContent | Out-File -FilePath "$env:TEMP\cosmos-emulator-logs.txt" -Encoding UTF8
        
    - name: Upload logs as artifact
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: debug-logs
        path: |
          ${{ runner.temp }}\cosmos-emulator-logs.txt
        retention-days: 5
