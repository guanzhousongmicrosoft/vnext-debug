name: Reproduce Cosmos DB Issue

on:
  push:
  pull_request:
  workflow_dispatch:

jobs:
  reproduce-issue:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
      
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '9.0.x'
        
    - name: Install Aspire workload
      run: |
        dotnet workload install aspire
        
    - name: Create test app
      run: |
        # Create isolated test directory
        mkdir cosmos-test
        cd cosmos-test
        
        # Create global usings
        cat > GlobalUsings.cs << 'EOF'
        global using System;
        global using System.Threading.Tasks;
        global using Aspire.Hosting;
        global using Aspire.Hosting.ApplicationModel;
        EOF

        # Create the minimal test that reproduces the issue
        cat > Program.cs << 'EOF'
        #pragma warning disable ASPIRECOSMOSDB001

        // Create the AppHost builder directly - simpler approach
        var builder = DistributedApplication.CreateBuilder(args);

        Console.WriteLine("Setting up Cosmos DB...");

        var cosmos = builder
            .AddAzureCosmosDB("database")
            .RunAsPreviewEmulator(options =>
            {
                options.WithLifetime(ContainerLifetime.Persistent);
            });

        var database = cosmos.AddCosmosDatabase("MyDb");
        var container = database.AddContainer("Users", "/emailAddress");

        Console.WriteLine("Building app...");
        var app = builder.Build();

        try
        {
            Console.WriteLine("Starting the application...");
            await app.StartAsync();
            
            Console.WriteLine("App started successfully! Waiting 30 seconds...");
            await Task.Delay(30000);
            
            Console.WriteLine("Stopping app...");
            await app.StopAsync();
            Console.WriteLine("Test completed successfully");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error: {ex.Message}");
            if (ex.Message.Contains("cosmos_api"))
            {
                Console.WriteLine("REPRODUCED: Found the cosmos_api schema error!");
            }
            
            try { await app.StopAsync(); } catch { }
            throw;
        }
        EOF

    - name: Create project file
      run: |
        cd cosmos-test
        cat > TestApp.csproj << 'EOF'
        <Project Sdk="Microsoft.NET.Sdk">
          <PropertyGroup>
            <OutputType>Exe</OutputType>
            <TargetFramework>net9.0</TargetFramework>
            <Nullable>enable</Nullable>
          </PropertyGroup>
          <ItemGroup>
            <PackageReference Include="Aspire.Hosting.Azure.CosmosDB" Version="9.*" />
          </ItemGroup>
        </Project>
        EOF

    - name: Run test
      run: |
        cd cosmos-test
        dotnet run --project TestApp.csproj
        
    - name: Show container logs if failed
      if: failure()
      run: |
        echo "=== Docker containers ==="
        docker ps -a
        echo "=== Container logs ==="
        for container in $(docker ps -a --format "{{.Names}}" | grep -i cosmos); do
          echo "--- Logs for $container ---"
          docker logs "$container" 2>&1 | tail -50
        done
